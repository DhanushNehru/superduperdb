"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[2312],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),d=o,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return t?r.createElement(f,s(s({ref:n},c),{},{components:t})):r.createElement(f,s({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3231:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const a={},s="Creating a DB of image features in torchvision",i={unversionedId:"use_cases/resnet_features",id:"use_cases/resnet_features",title:"Creating a DB of image features in torchvision",description:"In this use-case, we demonstrate how to use a pre-trained network from torchvision to generate",source:"@site/content/use_cases/resnet_features.md",sourceDirName:"use_cases",slug:"/use_cases/resnet_features",permalink:"/newdocs/index.html/docs/use_cases/resnet_features",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/content/use_cases/resnet_features.md",tags:[],version:"current",frontMatter:{},sidebar:"useCasesSidebar",previous:{title:"Ask the docs anything about SuperDuperDB",permalink:"/newdocs/index.html/docs/use_cases/question-the-docs"},next:{title:"Sentiment analysis with transformers",permalink:"/newdocs/index.html/docs/use_cases/sentiment_analysis_use_case"}},p={},l=[],c={toc:l},u="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-a-db-of-image-features-in-torchvision"},"Creating a DB of image features in ",(0,o.kt)("inlineCode",{parentName:"h1"},"torchvision")),(0,o.kt)("p",null,"In this use-case, we demonstrate how to use a pre-trained network from ",(0,o.kt)("inlineCode",{parentName:"p"},"torchvision")," to generate\nimage features for images which are automatically downloaded into MongoDB. We use a sample\nof the CoCo dataset (",(0,o.kt)("a",{parentName:"p",href:"https://cocodataset.org/#home"},"https://cocodataset.org/#home"),") to demonstrate the functionality."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!curl http://images.cocodataset.org/zips/val2014.zip -O val2014.zip\n!unzip - qq val2014.zip\n")),(0,o.kt)("p",null,"As usual, we instantiate the ",(0,o.kt)("inlineCode",{parentName:"p"},"Datalayer")," like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import pymongo\nfrom superduperdb import superduper\nfrom superduperdb.db.mongodb.query import Collection\n\ncollection = Collection('coco')\n\ndb = pymongo.MongoClient().documents\n\ndb = superduper(db)\n")),(0,o.kt)("p",null,"We then add all of the image URIs to MongoDB. The URIs can be a mixture of local file paths (",(0,o.kt)("inlineCode",{parentName:"p"},"file://..."),"), web URLs (",(0,o.kt)("inlineCode",{parentName:"p"},"http..."),") and\ns3 URIs (",(0,o.kt)("inlineCode",{parentName:"p"},"s3://..."),"). After adding the URIs, SuperDuperDB loads their content into MongoDB - no additional\noverhead or job definition required."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import glob\nimport random\n\nfrom superduperdb.container.document import Document as D\nfrom superduperdb.ext.pillow.image import pil_image as i\n\nuris = random.sample([f'file://{x}' for x in glob.glob('val2014/*.jpg')], 6000)\n\ndb.execute(collection.insert_many([D({'img': i(uri=uri)}) for uri in uris], encoders=(i,)))[:5000]\n")),(0,o.kt)("p",null,"We can verify that the images were correctly stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Datalayer"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from IPython.display import display\n\n# Jupyter often crashes with bigger images\ndisplay_image = lambda x: display(x.resize((round(x.size[0] * 0.5), round(x.size[1] * 0.5))))\n\nx = db.execute(collection.find_one())['img'].x\n\ndisplay_image(x)\n")),(0,o.kt)("p",null,"Now let's create the ",(0,o.kt)("inlineCode",{parentName:"p"},"torch"),"+",(0,o.kt)("inlineCode",{parentName:"p"},"torchvision")," model using the ",(0,o.kt)("inlineCode",{parentName:"p"},"TorchModel")," wrapper from SuperDuperDB.\nIt's possible to create arbitrary pre- and post-processing along with the model forward pass:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from torchvision import transforms\nimport torch\nimport torch.nn as nn\nimport torchvision.models as models\n\nimport warnings\n\nfrom superduperdb.ext.torch.model import TorchModel\nfrom superduperdb.ext.torch.tensor import tensor\n\nt = transforms.Compose([\n    transforms.Resize((224, 224)),   #must same as here\n    transforms.CenterCrop((224, 224)),\n    transforms.ToTensor(),\n    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])\n\ndef preprocess(x):\n    try:\n        return t(x)\n    except Exception as e:\n        warnings.warn(str(e))\n        return torch.zeros(3, 224, 224)\n\nresnet50 = models.resnet50(pretrained=True)\nmodules = list(resnet50.children())[:-1]\nresnet50 = nn.Sequential(*modules)\n\nmodel = TorchModel(\n    identifier='resnet50',\n    preprocess=preprocess,\n    object=resnet50,\n    postprocess=lambda x: x[:, 0, 0],\n    encoder=tensor(torch.float, shape=(2048,))\n)\n")),(0,o.kt)("p",null,"Let's verify ",(0,o.kt)("inlineCode",{parentName:"p"},"model")," by testing on a single data-point ",(0,o.kt)("inlineCode",{parentName:"p"},"one=True"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"model.predict(x, one=True)\n")),(0,o.kt)("p",null,"Now that we've got the model ready, we can apply it to the images in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Datalayer"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"model.predict(\n    X='img',\n    db=db,\n    select=collection.find(),\n    batch_size=10,\n    max_chunk_size=3000,\n    in_memory=False,\n    listen=True,\n)\n")),(0,o.kt)("p",null,"Let's verify that the features were stored in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Datalayer"),". You can see them in the\n",(0,o.kt)("inlineCode",{parentName:"p"},"_outputs.img.resnet50")," field: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"db.execute(collection.find_one()).unpack()\n")))}m.isMDXComponent=!0}}]);