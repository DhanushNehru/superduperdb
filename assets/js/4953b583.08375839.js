"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[3909],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||c[m]||a;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},18963:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={},l="A walkthrough of vector-search on MongoDB Atlas with SuperDuperDB",i={permalink:"/blog/2023/09/31/a-walkthrough-of-vector-search-on-mongodb-atlas-with-superduperdb/content",editUrl:"https://github.com/SuperDuperDB/superduperdb/tree/main/docs/blog/2023-09-31-a-walkthrough-of-vector-search-on-mongodb-atlas-with-superduperdb/content.md",source:"@site/blog/2023-09-31-a-walkthrough-of-vector-search-on-mongodb-atlas-with-superduperdb/content.md",title:"A walkthrough of vector-search on MongoDB Atlas with SuperDuperDB",description:"*In this tutorial we will show developers how to execute searches leveraging MongoDB Atlas vector-search",date:"2023-10-01T00:00:00.000Z",formattedDate:"October 1, 2023",tags:[],readingTime:2.89,hasTruncateMarker:!0,authors:[],frontMatter:{},prevItem:{title:"The easiest way to implement question-your documents we know",permalink:"/blog/2023/10/04/walkthrough-rag-app-atlas"},nextItem:{title:"Jumpstart AI development on MongoDB with SuperDuperDB",permalink:"/blog/2023/09/30/jump-start-ai-development"}},p={authorsImageUrls:[]},s=[],u={toc:s},d="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"In this tutorial we will show developers how to execute searches leveraging MongoDB Atlas vector-search\nvia SuperDuperDB")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Install ",(0,r.kt)("inlineCode",{parentName:"strong"},"superduperdb")," Python package")),(0,r.kt)("p",null,"Using vector-search with SuperDuperDB on MongoDB requires only one simple python package install:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install superduperdb\n")),(0,r.kt)("p",null,"With this install SuperDuperDB includes all the packages needed to define a range of API based and package based\nvector-search models, such as OpenAI and Hugging-Face's ",(0,r.kt)("inlineCode",{parentName:"p"},"transformers"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Connect to your Atlas cluster using SuperDuperDB")),(0,r.kt)("p",null,"SuperDuperDB ships with it's own MongoDB python client, which supports\nall commands supported by ",(0,r.kt)("inlineCode",{parentName:"p"},"pymongo"),". In the example below\nthe key to connecting to your Atlas cluster is the ",(0,r.kt)("inlineCode",{parentName:"p"},"db")," object."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"db")," object contains all functionality needed to read and write to\nthe MongoDB instance and also to define, save and apply a flexible range\nof AI models for vector-search."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from superduperdb.db.base.build import build_datalayer\nfrom superduperdb import CFG\nimport os\n\nATLAS_URI = "mongodb+srv://<user>@<atlas-server>/<database_name>"\nOPENAI_API_KEY = "<your-open-ai-api-key>"\n\nos.environ["OPENAI_API_KEY"] = OPENAI_API_KEY\n\nCFG.data_backend = ATLAS_URI\nCFG.vector_search = ATLAS_URI\n\ndb = build_datalayer()\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Load your data")),(0,r.kt)("p",null,"You can download some data to play with from ",(0,r.kt)("a",{parentName:"p",href:"https://superduperdb-public.s3.eu-west-1.amazonaws.com/pymongo.json"},"this link"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -O https://superduperdb-public.s3.eu-west-1.amazonaws.com/pymongo.json\n")),(0,r.kt)("p",null,"The data contains all inline doc-strings of the ",(0,r.kt)("inlineCode",{parentName:"p"},"pymongo")," Python API (official\nMongoDB driver for Python). The name of the function or class is in ",(0,r.kt)("inlineCode",{parentName:"p"},'"res"')," and\nthe doc-string is contained in ",(0,r.kt)("inlineCode",{parentName:"p"},'"value"'),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import json\n\nwith open('pymongo.json') as f:\n    data = json.load(f)\n")),(0,r.kt)("p",null,"Here's one record to illustrate the data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "key": "pymongo.mongo_client.MongoClient",\n  "parent": null,\n  "value": "\\nClient for a MongoDB instance, a replica set, or a set of mongoses.\\n\\n",\n  "document": "mongo_client.md",\n  "res": "pymongo.mongo_client.MongoClient"\n}\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Insert the data into your Atlas cluster")),(0,r.kt)("p",null,"We can use the SuperDuperDB connection to insert this data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.db.mongodb.query import Collection\n\ncollection = Collection('documents')\n\ndb.execute(\n    collection.insert_many([\n        Document(r) for r in data\n    ])\n)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Define your vector model and vector-index")),(0,r.kt)("p",null,"Now we have data in our collection we can define the vector-index:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.vector_index import VectorIndex\nfrom superduperdb.container.listener import Listener\nfrom superduperdb.ext.numpy.array import array\nfrom superduperdb.ext.openai.model import OpenAIEmbedding\n\nmodel = OpenAIEmbedding(model='text-embedding-ada-002')\n\ndb.add(\n    VectorIndex(\n        identifier=f'pymongo-docs',\n        indexing_listener=Listener(\n            model=model,\n            key='value',\n            select=Collection('documents').find(),\n            predict_kwargs={'max_chunk_size': 1000},\n        ),\n    )\n)\n")),(0,r.kt)("p",null,"This command tells the system that we want to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"search the ",(0,r.kt)("inlineCode",{parentName:"li"},'"documents"')," collection"),(0,r.kt)("li",{parentName:"ul"},"set-up a vector-index on our Atlas cluster, using the text in the ",(0,r.kt)("inlineCode",{parentName:"li"},'"value"')," field"),(0,r.kt)("li",{parentName:"ul"},"use the OpenAI model ",(0,r.kt)("inlineCode",{parentName:"li"},'"text-embedding-ada-002"')," to create vector-embeddings")),(0,r.kt)("p",null,"After issuing this command, SuperDuperDB does these things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Configures an MongoDB Atlas knn-index in the ",(0,r.kt)("inlineCode",{parentName:"li"},'"documents"')," collection"),(0,r.kt)("li",{parentName:"ul"},"Saves the ",(0,r.kt)("inlineCode",{parentName:"li"},"model")," object in the SuperDuperDB model store hosted on ",(0,r.kt)("inlineCode",{parentName:"li"},"gridfs")),(0,r.kt)("li",{parentName:"ul"},"Applies ",(0,r.kt)("inlineCode",{parentName:"li"},"model")," to all data in the ",(0,r.kt)("inlineCode",{parentName:"li"},'"documents"')," collection, and saves the vectors in the documents"),(0,r.kt)("li",{parentName:"ul"},"Saves the fact that ",(0,r.kt)("inlineCode",{parentName:"li"},"model")," is connected to the ",(0,r.kt)("inlineCode",{parentName:"li"},'"pymongo-docs"')," vector-index")),(0,r.kt)("p",null,"You can confirm that the index has been created and view the index's settings\nin the ",(0,r.kt)("a",{parentName:"p",href:"https://cloud.mongodb.com/"},"Atlas UI"),". It should look like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(46561).Z,width:"2282",height:"1672"})),(0,r.kt)("p",null,"The nesting of the index signifies the fact that the index created looks\ninto the ",(0,r.kt)("inlineCode",{parentName:"p"},"_outputs.<key>.<model-name>")," path, which is where the model's vector outputs are stored\nautomatically by SuperDuperDB."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use vector-search in a super-duper query")),(0,r.kt)("p",null,"Now we are ready to use the SuperDuperDB query-API for vector-search.\nYou'll see below, that SuperDuperDB handles all logic related to\nconverting queries on the fly to vectors under the hood."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.db.mongodb.query import Collection\nfrom superduperdb.container.document import Document as D\nfrom IPython.display import *\n\nquery = 'Find data'\n\nresult = db.execute(\n    Collection('documents')\n        .like(D({'value': query}), vector_index='pymongo-docs', n=5)\n        .find()\n)\n\nfor r in result:\n    display(Markdown(f'### `{r[\"parent\"] + \".\" if r[\"parent\"] else \"\"}{r[\"res\"]}`'))\n    display(Markdown(r['value']))\n")))}c.isMDXComponent=!0},46561:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/atlas_screen-22778bde02e875c6f464c9bb3d565280.png"}}]);