"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[6727],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),d=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?r.createElement(f,s(s({ref:n},c),{},{components:t})):r.createElement(f,s({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=m;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[p]="string"==typeof e?e:o,s[1]=a;for(var d=2;d<i;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:5},s="Vector Indexes",a={unversionedId:"docs/usage/vector_index",id:"docs/usage/vector_index",title:"Vector Indexes",description:"SuperDuperDB has support for vector-search via LanceDB using vector-indexes.",source:"@site/content/docs/usage/vector_index.md",sourceDirName:"docs/usage",slug:"/docs/usage/vector_index",permalink:"/docs/docs/usage/vector_index",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/content/docs/usage/vector_index.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Queries",permalink:"/docs/docs/usage/queries"},next:{title:"Datasets",permalink:"/docs/docs/usage/datasets"}},l={},d=[{value:"Creating vector indexes",id:"creating-vector-indexes",level:2},{value:"Using vector indexes",id:"using-vector-indexes",level:2},{value:"MongoDB",id:"mongodb",level:3}],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vector-indexes"},"Vector Indexes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{note}"},"SuperDuperDB provides first-class support for Vector-Search, including \nencoding of inputs by arbitrary AI models.\n")),(0,o.kt)("p",null,"SuperDuperDB has support for vector-search via LanceDB using vector-indexes.\nWe are working on support for vector-search via MongoDB enterprise search in parallel."),(0,o.kt)("p",null,"Vector-indexes build on top of the ",(0,o.kt)("a",{parentName:"p",href:"db"},"DB"),", ",(0,o.kt)("a",{parentName:"p",href:"models"},"models")," and ",(0,o.kt)("a",{parentName:"p",href:"listeners"},"listeners"),"."),(0,o.kt)("h2",{id:"creating-vector-indexes"},"Creating vector indexes"),(0,o.kt)("p",null,"In order to build a vector index, one defines one or two models, and /docs/docs/usage/models#daemonizing-models-with-listenerss them with listeners.\nIn the simples variant one does simply:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.vector_index import VectorIndex\nfrom sueprduperdb.core.listener import listener\n\ndb.add(\n    VectorIndex(indexing_listener='my-model/my-key')\n)\n")),(0,o.kt)("p",null,"The model ",(0,o.kt)("inlineCode",{parentName:"p"},"my-model")," should have already been registered with SuperDuperDB (see ",(0,o.kt)("a",{parentName:"p",href:"models"},"models")," for help). ",(0,o.kt)("inlineCode",{parentName:"p"},"my-key")," is the field to be searched. Together ",(0,o.kt)("inlineCode",{parentName:"p"},"my-model/my-key")," refer to the ",(0,o.kt)("a",{parentName:"p",href:"/docs/docs/usage/models#daemonizing-models-with-listeners"},"listener")," component (previously created) which is responsible for computing vectors from the data.\nSee ",(0,o.kt)("a",{parentName:"p",href:"/docs/docs/usage/models#daemonizing-models-with-listeners"},"here")," for how to create such a component."),(0,o.kt)("p",null,"Alternatively the model and listener may be created inline.\nHere is how to define a simple linear bag-of-words model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.container.vector_index import VectorIndex\nfrom superduperdb.container.listener import Listener\nfrom superduperdb.model.sentence_transformers.wrapper import Pipeline\n\n\nclass TextEmbedding:\n    def __init__(self, lookup):\n        self.lookup = lookup  # mapping from strings to pytorch tensors\n\n    def __call__(self, x):\n        return sum([self.lookup[y] for y in x.split()])\n\n for\ndb.add(\n    VectorIndex(\n        identifier='my-index',\n        indexing_listener=Listener(\n            model=TorchModel(\n                preprocess=TextEmbedding(d),  # \"d\" should be loaded from disk\n                object=torch.nn.Linear(64, 512),\n            )\n        key = '<key-to-search>',\n    )\n)\n")),(0,o.kt)("h2",{id:"using-vector-indexes"},"Using vector indexes"),(0,o.kt)("h3",{id:"mongodb"},"MongoDB"),(0,o.kt)("p",null,"To use your vector index to search MongoDB, there are two possibilities:"),(0,o.kt)("p",null,"Firstly, find similar matches and then filter the results:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},">>> from superduperdb.container.document import Document as D\n>>> db.execute(\n...    Collection('my-coll')\n...       .like(D({'<key-to-search>': '<content' >}, vector_index='my-index')\n...       .find( < filter >, < projection >)\n...    )\n... )\n")),(0,o.kt)("p",null,"Secondly, filter the data and find similar matches within the results:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},">>> db.execute(\n...    Collection('my-coll')\n...        .like(D({'<key-to-search>': '<content'>}), vector_index='my-index')\n...        .find(<filter>, <projection>)\n... )\n")))}u.isMDXComponent=!0}}]);