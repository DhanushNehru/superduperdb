"use strict";(self.webpackChunknewdocs=self.webpackChunknewdocs||[]).push([[3057],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},98655:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:4},i="Queries",s={unversionedId:"docs/usage/queries",id:"docs/usage/queries",title:"Queries",description:"SuperDuperDB queries are based on the queries of the underlying database, upon which the",source:"@site/content/docs/usage/queries.md",sourceDirName:"docs/usage",slug:"/docs/usage/queries",permalink:"/docs/docs/usage/queries",draft:!1,editUrl:"https://github.com/SuperDuperDB/superduperdb/content/docs/usage/queries.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Models",permalink:"/docs/docs/usage/models"},next:{title:"Vector Indexes",permalink:"/docs/docs/usage/vector_index"}},l={},c=[{value:"MongoDB",id:"mongodb",level:2},{value:"Featurization",id:"featurization",level:2},{value:"Vector Search queries",id:"vector-search-queries",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"queries"},"Queries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-{note}"},"SuperDuperDB wraps standard datastore query APIs. It augments\nthese queries with support for vector-search and recall of complex data-types.\n")),(0,a.kt)("p",null,"SuperDuperDB queries are based on the queries of the underlying database, upon which the\n",(0,a.kt)("inlineCode",{parentName:"p"},"DB")," is based (see the ",(0,a.kt)("a",{parentName:"p",href:"db"},"section on the ",(0,a.kt)("inlineCode",{parentName:"a"},"DB")),"). "),(0,a.kt)("p",null,"Unlike some Python clients, in SuperDuperDB, queries are objects, rather then methods or functions.\nThis allows SuperDuperDB to serialize these queries for use in diverse tasks, such as model\napplications using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Listener")," paradigm (see ",(0,a.kt)("a",{parentName:"p",href:"listeners"},"here"),"), model application, and management of vector-indices)."),(0,a.kt)("p",null,"A query is executed as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# db a `DB` instance\ndb.execute(query)\n")),(0,a.kt)("h2",{id:"mongodb"},"MongoDB"),(0,a.kt)("p",null,"We currently provide first-class support for MongoDB as the database backend. As in ",(0,a.kt)("inlineCode",{parentName:"p"},"pymongo")," all queries operate at the collection level:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.db.mongodb.query import Collection\n\ncollection = Collection(name='documents')\n")),(0,a.kt)("p",null,"With this collection standard query types may be executed. Whereas ",(0,a.kt)("inlineCode",{parentName:"p"},"pymongo")," returns vanilla python dictionaries, SuperDuperDB returns dictionaries wrapped as ",(0,a.kt)("inlineCode",{parentName:"p"},"Document")," instances:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},">>> db.execute(collection.find_one())\nDocument({'_id': ObjectId('64b89e92c08139e1cedc11a4'), 'x': Encodable(x=tensor([ 0.2059,  0.5608,  ...]), encoder=Encoder(identifier='torch.float32[512]', decoder=<Artifact artifact=<superduperdb.encoders.torch.tensor.DecodeTensor object at 0x1785b5750> serializer=pickle>, encoder=<Artifact artifact=<superduperdb.encoders.torch.tensor.EncodeTensor object at 0x1786767d0> serializer=pickle>, shape=[512], version=0)), '_fold': 'train'})\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Documents")," are also used, whenever a query involves inserting data into the database. The reason for this,\nis that the data may contain complex data-types such as images (see ",(0,a.kt)("a",{parentName:"p",href:"encoders"},"the section on encoders")," for more detail):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from superduperdb.core.document import Document as D\n>>> db.execute(\n    collection.insert_many([\n        D({'this': f'is a test {i}'})\n        for i in range(10)\n    ])\n)\n")),(0,a.kt)("p",null,"SuperDuperDB also includes a composite API, enabling support for vector-search together with the query API of the database: see the ",(0,a.kt)("a",{parentName:"p",href:"/docs/docs/usage/vector_index"},"section on vector-search")," for details."),(0,a.kt)("p",null,"Supported MongoDB queries:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"find_one")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"find")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"aggregate")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"update_one")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"update_many")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delete_many"))),(0,a.kt)("h2",{id:"featurization"},"Featurization"),(0,a.kt)("p",null,"In some AI applications, for instance in ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Transfer_learning"},"transfer learning"),', it is useful to "represent" data using some model-derived "features".\nWe support featurization in combination with ',(0,a.kt)("inlineCode",{parentName:"p"},"find")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"find_one")," queries:"),(0,a.kt)("p",null,"To do this, one chains these methods with ",(0,a.kt)("inlineCode",{parentName:"p"},".featurize"),", specifying the model with which one would like to featurize. In MongoDB this comes out as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"cursor = db.execute(\n    collection.find().featurize({'image': 'my_resnet_50'})\n)\n")),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"model"},"model section")," for information on how to compute and keep features (model outputs)\nup to date."),(0,a.kt)("h2",{id:"vector-search-queries"},"Vector Search queries"),(0,a.kt)("p",null,"If one or more ",(0,a.kt)("inlineCode",{parentName:"p"},"VectorIndex")," instances have been configured together with the ",(0,a.kt)("inlineCode",{parentName:"p"},"DB"),", these\nmay be used in hybrid queries together with standard databasing queries:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"cursor_1 = db.execute(\n    collection.like({'image': my_image}), vector_index='<index>').find({'<key>': '<value>'})\ncursor_2 = db.execute(\n    collection.find({'<key>': '<value>'}).like({'image': my_image}, vector_index='<index>')\n)\n")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/docs/usage/vector_index"},"here")," for more background on vector-search and ",(0,a.kt)("inlineCode",{parentName:"p"},"VectorIndex")," functionality."))}d.isMDXComponent=!0}}]);